<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="edu.kh.podo.*" />

	<interceptors>

		<interceptor>
			<mapping path="/**" />
			<beans:bean id='categoryInterceptor' class="edu.kh.podo.common.interceptor.CategoryInterceptor" />

		</interceptor>

	</interceptors>

	<!-- 트랜잭션 처리 시 @Transactional 어노테이션을 사용할 예정 @Transactional : 클래스 또는 메서드 
		수행 후 트랜잭션 처리를 하라고 알려주는 어노테이션 -> 해당 어노테이션을 인식하라는 설정이 필요하다. -> annotation-driven -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- aop auto proxy -->
	<aop:aspectj-autoproxy proxy-target-class="false" />
	
	<task:annotation-driven/>
	
	<beans:bean id="chatHandler" class="edu.kh.podo.chat.model.websocket.ChatWebSocketHandler" />
	
	<beans:bean id="myHandler" class="edu.kh.podo.alarm.model.websocket.WebSocketHandler" />

	<websocket:handlers>

		<!-- 웹소켓 요청(주소)을 처리할 bean 지정 -->
		<websocket:mapping handler="chatHandler" path="/chat" />
		
		<websocket:mapping handler="myHandler" path="/alarm" />

		<websocket:handshake-interceptors>
			<!-- interceptor : http 통신에서 req, resp 가로채는 역할 handshake-interceptors 
				- 요청 관련 데이터 중 HttpSession을 가로채서 WebSocketSession에 넣어주는 역할 -->
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />

		</websocket:handshake-interceptors>

		<!-- SockJS 라이브러리를 이용해서 만들어진 웹소켓 객체임을 인식 -->
		<websocket:sockjs />

	</websocket:handlers>


	
</beans:beans>
